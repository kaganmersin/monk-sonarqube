namespace: sonarqube-dce-postgresql

database:
  defines: runnable
  inherits: postgres/12
  variables:
    db-user:
      value: <- `${database-user}`
    db-password:
      value: <- `${database-password}`
    db-name:
      value: <- `${database-name}`




nginx:
  defines: runnable
  inherits: nginx
  files:
    server-def:
      contents: |   
        server {
            listen 0.0.0.0:{{ v "listen-port" }};
            return 404;
        }   
        server {
          listen 0.0.0.0:{{ v "listen-port" }};
          server_name {{ v "server-name" }};
          location / {
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;
            proxy_pass http://{{ v "proxy-target-host" }}:{{ v "proxy-target-port" }};
          }
        }
      mode: 511
      path: /opt/bitnami/nginx/conf/server_blocks/reverse_proxy.conf
      container: nginx-reverse-proxy
  containers:
    defines: containers
    nginx-reverse-proxy:
      image-tag: <- `${nginx-image}`
      image: docker.io/bitnami/nginx
      ports:
      - <- `0.0.0.0:${listen-port}:${listen-port}/tcp`
  depends:
    wait-for:
      runnables:
        - sonarqube-dce-postgresql/sonarqube
      timeout: 30      
  variables:
    proxy-target-host:
      value: <- get-hostname("sonarqube-dce-postgresql/sonarqube", "sonarqube") split(".dns.podman") join("")
      type: string
    listen-port:
      value: <- $nginx-listen-port
      type: string
    server-name:
      value: <- $sonarqube-server-name
      type: string
    proxy-target-port:
      value: "9000"
      type: string
    nginx-image:
      value: <- $nginx-image-tag
      type: string      



sonarqube:
  defines: runnable
  containers:
    defines: containers
    sonarqube:
      image:  sonarqube
      image-tag: <- `${sonarqube-image}`
      paths:
        - <- `${monk-volume-path}/sonarqube/extensions:/opt/sonarqube/extensions`
        - <- `${monk-volume-path}/sonarqube/logs:/opt/sonarqube/logs`   
      ports:
        - 9000
  depends:
    wait-for:
      runnables:
        - sonarqube-dce-postgresql/database
        - sonarqube-dce-postgresql/search
      timeout: 30
  variables:
    defines: variables
    sonarqube-image:
      type: string
      value: <- `${sonarqube-image-tag}`    
    SONAR_JDBC_URL:
      env: SONAR_JDBC_URL
      type: string
      value: <- `jdbc:postgresql://${db-host}:5432/${db-name}`
    db-user:
      env: SONAR_JDBC_USERNAME
      type: string
      value: <- `${database-user}`
    db-password:
      env: SONAR_JDBC_PASSWORD
      type: string
      value: <- `${database-password}`
    db-name:
      type: string
      value: <- `${database-name}`
    db-host:
      type: string
      value: <- get-hostname("sonarqube-dce-postgresql/database", "postgres") split(".dns.podman") join("")
    sonar-web-port:
      env: SONAR_WEB_PORT
      value: "9000"
      type: string
    sonar-cluster-search-hosts:
      env: SONAR_CLUSTER_SEARCH_HOSTS
      value: <- `${sonar-cluster-first-search-host},${sonar-cluster-second-search-host},${sonar-cluster-third-search-host}`
      type: string
    sonar-cluster-first-search-host:      
      type: string
      value: <- get-container-ip("sonarqube-dce-postgresql/search", "search-1") split(".dns.podman") join("")
    sonar-cluster-second-search-host:      
      type: string
      value: <- get-container-ip("sonarqube-dce-postgresql/search", "search-2") split(".dns.podman") join("")
    sonar-cluster-third-search-host:      
      type: string
      value: <- get-container-ip("sonarqube-dce-postgresql/search", "search-3") split(".dns.podman") join("")
    sonar-cluster-hosts:
      env: SONAR_CLUSTER_HOSTS
      value: <- get-hostname("sonarqube-dce-postgresql/sonarqube", "sonarqube") split(".dns.podman") join("")
      type: string  
    sonar-auth-jwtbase645s256secret:
      env: SONAR_AUTH_JWTBASE64HS256SECRET
      value: <- $sonarqube-auth-jwtbase645s256secret
      type: string  
    sonar-virtual-host:
      env: VIRTUAL_HOST
      value: <- $sonarqube-server-name
      type: string        
    sonar-virtual-port:
      env: VIRTUAL_PORT
      value: "9000"
      type: string



search:
  defines: runnable
  containers:
    defines: containers
    search-1:
      image: sonarqube:datacenter-search
      paths:
        - <- `${monk-volume-path}/sonarqube/dce-data-1:/opt/sonarqube/data`
      ports:
        - 9001
        - 9002
    search-2:
      image: sonarqube:datacenter-search
      paths:
        - <- `${monk-volume-path}/sonarqube/dce-data-2:/opt/sonarqube/data`
      ports:
        - 9001
        - 9002
    search-3:
      image: sonarqube:datacenter-search
      paths:
        - <- `${monk-volume-path}/sonarqube/dce-data-3:/opt/sonarqube/data`   
      ports:
        - 9001
        - 9002
  variables:
    defines: variables
    sonarqube-image:
      type: string
      value: <- `${sonarqube-image-tag}`    
    SONAR_JDBC_URL:
      env: SONAR_JDBC_URL
      type: string
      value: <- `jdbc:postgresql://${db-host}:5432/${db-name}`
    db-user:
      env: SONAR_JDBC_USERNAME
      type: string
      value: <- `${database-user}`
    db-password:
      env: SONAR_JDBC_PASSWORD
      type: string
      value: <- `${database-password}`
    db-name:
      type: string
      value: <- `${database-name}`
    db-host:
      type: string
      value: <- get-hostname("sonarqube-dce-postgresql/database", "postgres") split(".dns.podman") join("")
    sonar-cluster-search-hosts:
      env: SONAR_CLUSTER_ES_HOSTS
      value: <- `${sonar-cluster-first-search-host},${sonar-cluster-second-search-host},${sonar-cluster-third-search-host}`      
      type: string
    sonar-cluster-first-search-host:      
      type: string
      value: <- get-hostname("sonarqube-dce-postgresql/search", "search-1") split(".dns.podman") join("")
    sonar-cluster-second-search-host:      
      type: string
      value: <- get-hostname("sonarqube-dce-postgresql/search", "search-2") split(".dns.podman") join("")
    sonar-cluster-third-search-host:      
      type: string
      value: <- get-hostname("sonarqube-dce-postgresql/search", "search-3") split(".dns.podman") join("")